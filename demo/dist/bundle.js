!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}([function(e,t,r){"use strict";r.d(t,"a",function(){return n});var n={keyTypeArray:/\[\s*(\d+)\s*\]+/g,params:/\{\s*(\d+)\s*\}+/g,splitQuery:/\s+in\s+/,findTemplateVars:/\{\{\s*([\[\]\$\.\_0-9a-zA-Z]+)\s*\}\}/g,splitQueryVars:/\s*,\s*/,isArraySintax:{ini:/(?=^\s*\[)/,end:/(?=\]\s*$)/},filters:{like:/\s+like\s+/,as:/\s+as\s+/},hasSelectorCss:/^(#|\.)\S/}},function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=function(){function e(){}return e.renderTemplate=function(e,t){return e.replace(n.a.keyTypeArray,".$1").replace(n.a.findTemplateVars,function(e,r){for(var n=r.split("."),a=t[n[0]],i=1;i<n.length;i++)a=a[n[i]];return a||e})},e.insertAfter=function(e,t){t.nextSibling?t.parentNode.insertBefore(e,t.nextSibling):t.parentNode.appendChild(e)},e.isOfType=function(e,t){return{}.toString.call(e).match(/\s(.+)\]$/)[1].toLowerCase()===t},e}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return RepeatHtml});var _patterns__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_filter__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),_helpers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),RepeatHtml=function(){function RepeatHtml(e){void 0===e&&(e={}),this.repeatAttributeName=e.attrName||"repeat",this._scope=e.scope||{},this.originalElements=null,this.filter=new _filter__WEBPACK_IMPORTED_MODULE_1__.a(this._scope,this.repeatAttributeName,this.refresh.bind(this)),this.selector="[data-"+this.repeatAttributeName+"]",(e.compile||void 0===e.compile)&&this.init(!1,!1)}return RepeatHtml.prototype.scope=function(e,t,r){return void 0===t?this._scope[e]:(this._scope[e]=this._scope[e]||{},this._scope[e].data=t,this._scope[e].originalData=t,"function"==typeof r?this._scope[e].funcBackAfter=r:_helpers__WEBPACK_IMPORTED_MODULE_2__.a.isOfType(r,"array")?(this._scope[e].funcBackAfter=r[0],this._scope[e].funcBack=r[1]):"object"==typeof r&&(this._scope[e].funcBackAfter=r.after,this._scope[e].funcBack=r.funcBack),this.refresh(e),this._scope[e].funcBackAfter&&this._scope[e].funcBackAfter.call(this,t),this)},RepeatHtml.prototype.refresh=function(e,t){return document.querySelectorAll(this.selector).length>0&&this.init(!1,!1),this.reRender(e,t),this},RepeatHtml.prototype.reRender=function(e,t){for(var r,n=this,a=this.originalElements,i=null,s=document.createDocumentFragment(),o=[],l=this._scope[e],c=function(n){if(r=a[n],t&&t.dataset.filter!==r.element.dataset.filter)return"continue";if(!(i=u.resolveQuery(r.element.dataset[u.repeatAttributeName])).datas||e!==i.varName)return"continue";var c=r.element.innerHTML;r.childs.forEach(function(e,t){0!==t&&r.parentElement.removeChild(e)}),r.childs.splice(1,r.childs.length),i.datas.forEach(function(e){var t,n=r.elementClone.cloneNode(!1);n.innerHTML=_helpers__WEBPACK_IMPORTED_MODULE_2__.a.renderTemplate(c,((t={})[i.varsIterate]=e,t)),s.appendChild(n),r.childs.push(n),l.funcBack&&o.push([e,n])}),_helpers__WEBPACK_IMPORTED_MODULE_2__.a.insertAfter(s,r.childs[0]),s=document.createDocumentFragment()},u=this,p=0;p<a.length;p++)c(p);e&&l.funcBack&&o.forEach(function(e){l.funcBack.apply(n,e)})},RepeatHtml.prototype.init=function(e,t){var r=this,n=document.querySelectorAll(this.selector+(t?"":" "+this.selector)),a=null,i=null,s=0,o=document.createDocumentFragment();this.originalElements||(this.originalElements=[]);for(var l=function(t){if(a=n[t].element||n[t],!(i=c.resolveQuery(a.dataset[c.repeatAttributeName])).datas)return"continue";var l=a.innerHTML,u=a.cloneNode(!0),p=document.createComment("RepeatHTML: start( "+a.dataset[c.repeatAttributeName]+" )");u.removeAttribute("data-"+c.repeatAttributeName),u.removeAttribute("data-filter"),e||(c.originalElements.push({element:a.cloneNode(!0),elementClone:u,parentElement:a.parentElement,childs:[p]}),s=c.originalElements.length),o.appendChild(p),i.datas.forEach(function(t){var n,a=u.cloneNode(!1);a.innerHTML=_helpers__WEBPACK_IMPORTED_MODULE_2__.a.renderTemplate(l,((n={})[i.varsIterate]=t,n)),o.appendChild(a),e||r.originalElements[s-1].childs.push(a)}),a.parentElement.replaceChild(o,a),o=document.createDocumentFragment()},c=this,u=0;u<n.length;u++)l(u);if(document.querySelectorAll(this.selector).length>0&&!t)return this.init(e,!0)},RepeatHtml.prototype.resolveQuery=function(e){return""!==(e=e.split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQuery))[0].trim()||e[1]?{varsIterate:e[0].split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQueryVars),datas:this.parseData.call(this,e[1].trim()),varName:e[1].trim()}:{varsIterate:null,datas:null,varName:null}},RepeatHtml.prototype.parseData=function(strData){return this._scope[strData]?this.filter.apply(strData):_patterns__WEBPACK_IMPORTED_MODULE_0__.a.isArraySintax.ini.test(strData)&&_patterns__WEBPACK_IMPORTED_MODULE_0__.a.isArraySintax.end.test(strData)?eval(strData):null},RepeatHtml}()},function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=function(){function e(e,t,r){this.scope=e,this.repeatAttributeName=t,this.callback=r,this.filters={},this.findFilters()}return e.prototype.apply=function(e){return e&&this.filters[e]?this.scope[e].data.filter(this.filters[e]):this.scope[e].data},e.prototype.filter=function(e,t,r){var a=this;if(t=t.trim(),this.validate(e,t))return!1;var i=t.split(n.a.filters.as),s=i[0],o=i[1];o||(o=s,s=null);var l=document.getElementById(o.replace(/#|^%|%$/g,""));if(l){var c=/^%/g.test(o)?"^":"",u=/%$/g.test(o)?"$":"";return t=l.value,l.addEventListener("keyup",function(t){var n=t.target.value;a.scope[e].data=a.scope[e].originalData.filter(function(e){var t=new RegExp(c+n+u,"gi");if(s)return t.test(e[s]);for(var r in e)if(t.test(e[r]))return!0}),a.callback(e,r)}),this}},e.prototype.validate=function(e,t){return void 0!==e&&(!(!n.a.filters.as.test(t)&&!n.a.hasSelectorCss.test(t.replace(/^%|%$/g,"")))&&void 0)},e.prototype.findFilters=function(){for(var e,t,r=this,a=document.querySelectorAll("[data-filter]"),i=0;e=a[i];i++)t=e.dataset[this.repeatAttributeName].split(n.a.splitQuery),e.dataset.filter.split(n.a.splitQueryVars).forEach(function(n){r.filter(t[1],n,e)})},e}()},function(e,t,r){"use strict";r.r(t);var n=r(2);r.d(t,"RepeatHtml",function(){return n.a})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,