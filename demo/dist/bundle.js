!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t,r){"use strict";r.d(t,"a",function(){return n});var n={keyTypeArray:/\[\s*(\d+)\s*\]+/g,params:/\{\s*(\d+)\s*\}+/g,splitQuery:/\s+in\s+/,findTemplateVars:/\{\{\s*([\[\]\$\.\_0-9a-zA-Z]+)\s*\}\}/g,splitQueryVars:/\s*,\s*/,isArraySintax:{ini:/(?=^\s*\[)/,end:/(?=\]\s*$)/},filters:{like:/\s+like\s+/,as:/\s+as\s+/},hasSelectorCss:/^(#|\.)\S/}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return RepeatHtml});var _patterns__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),RepeatHtml=function(){function RepeatHtml(e){void 0===e&&(e={}),this.REPEAT_ATTR_NAME=e.attrName||"repeat",this._filters={},this._scope=e.scope||{},this._originalElements=null,this.searchFilters(),(e.compile||void 0===e.compile)&&this.init(!1,!1)}return RepeatHtml.prototype.scope=function(e,t,r){return void 0===t?this._scope[e]:(this._scope[e]=this._scope[e]||{},this._scope[e].data=t,this._scope[e].originalData=t,"function"==typeof r?this._scope[e].funcBackAfter=r:isOfType(r,"array")?(this._scope[e].funcBackAfter=r[0],this._scope[e].funcBack=r[1]):"object"==typeof r&&(this._scope[e].funcBackAfter=r.after,this._scope[e].funcBack=r.funcBack),this.refresh(e),this._scope[e].funcBackAfter&&this._scope[e].funcBackAfter.call(this,t),this)},RepeatHtml.prototype.filter=function(e,t,r){var n=this;if(t=t.trim(),this.validateFilter(e,t))return!1;var a=t.split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.filters.as),i=a[0],s=a[1];s||(s=i,i=null);var l=document.getElementById(s.replace(/#|^%|%$/g,""));if(!l)return this;var o=/^%/g.test(s)?"^":"",_=/%$/g.test(s)?"$":"";return t=l.value,l.addEventListener("keyup",function(t){var a=t.target.value;n._scope[e].data=n._scope[e].originalData.filter(function(e){var t=new RegExp(o+a+_,"gi");if(i)return t.test(e[i]);for(var r in e)if(t.test(e[r]))return!0}),n.refresh(e,r)}),this},RepeatHtml.prototype.searchFilters=function(){var e=this,t=document.querySelectorAll("[data-filter]");if(!(t.length<=0))for(var r=null,n="",a=0;r=t[a];a++)n=r.dataset[this.REPEAT_ATTR_NAME].split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQuery),r.dataset.filter.split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQueryVars).forEach(function(t){e.filter(n[1],t,r)})},RepeatHtml.prototype.applyFilter=function(e){return e&&this._filters[e]?this._scope[e].data.filter(this._filters[e]):this._scope[e].data},RepeatHtml.prototype.validateFilter=function(e,t){return void 0!==e&&(!(!_patterns__WEBPACK_IMPORTED_MODULE_0__.a.filters.as.test(t)&&!_patterns__WEBPACK_IMPORTED_MODULE_0__.a.hasSelectorCss.test(t.replace(/^%|%$/g,"")))&&void 0)},RepeatHtml.prototype.refresh=function(e,t){return document.querySelectorAll("[data-"+this.REPEAT_ATTR_NAME+"]").length>0&&this.init(!1,!1),this.reRender(e,t),this},RepeatHtml.prototype.reRender=function(e,t){var r,n,a=this,i=this._originalElements,s="",l=null,o=i.length,_=document.createDocumentFragment(),c=[],p=this._scope[e];for(r=0;r<o;r++)n=i[r],t&&t.dataset.filter!==n.element.dataset.filter||(l=this.resolveQuery.call(this,n.element.dataset[this.REPEAT_ATTR_NAME])).datas&&e===l.varName&&(s=n.element.innerHTML,n.childs.forEach(function(e,t){0!==t&&n.parentElement.removeChild(e)}),n.childs.splice(1,n.childs.length),l.datas.forEach(function(e){var t,r=n.elementClone.cloneNode(!1);r.innerHTML=renderTemplate(s,((t={})[l.varsIterate]=e,t)),_.appendChild(r),n.childs.push(r),p.funcBack&&c.push([e,r])}),insertAfter(_,n.childs[0]),_=document.createDocumentFragment());e&&p.funcBack&&c.forEach(function(e){p.funcBack.apply(a,e)})},RepeatHtml.prototype.init=function(e,t){var r,n,a=this,i="[data-"+this.REPEAT_ATTR_NAME+"]",s=document.querySelectorAll(i+(t?"":" "+i)),l=null,o=null,_=0,c=document.createDocumentFragment();this._originalElements||(this._originalElements=[]);var p=function(){if(l=s[r].element||s[r],!(o=u.resolveQuery.call(u,l.dataset[u.REPEAT_ATTR_NAME])).datas)return"continue";var t=l.innerHTML,n=l.cloneNode(!0),i=document.createComment("RepeatHTML: start( "+l.dataset[u.REPEAT_ATTR_NAME]+" )");n.removeAttribute("data-"+u.REPEAT_ATTR_NAME),n.removeAttribute("data-filter"),e||(u._originalElements.push({element:l.cloneNode(!0),elementClone:n,parentElement:l.parentElement,childs:[i]}),_=u._originalElements.length),c.appendChild(i),o.datas.forEach(function(r){var i,s=n.cloneNode(!1);s.innerHTML=renderTemplate(t,((i={})[o.varsIterate]=r,i)),c.appendChild(s),e||a._originalElements[_-1].childs.push(s)}),l.parentElement.replaceChild(c,l),c=document.createDocumentFragment()},u=this;for(r=0,n=s.length;r<n;r++)p();if(document.querySelectorAll(i).length>0&&!t)return this.init(e,!0)},RepeatHtml.prototype.resolveQuery=function(e){return""!==(e=e.split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQuery))[0].trim()||e[1]?{varsIterate:e[0].split(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.splitQueryVars),datas:this.parseData.call(this,e[1].trim()),varName:e[1].trim()}:{varsIterate:null,datas:null,varName:null}},RepeatHtml.prototype.parseData=function(strData){return this._scope[strData]?this.applyFilter(strData):_patterns__WEBPACK_IMPORTED_MODULE_0__.a.isArraySintax.ini.test(strData)&&_patterns__WEBPACK_IMPORTED_MODULE_0__.a.isArraySintax.end.test(strData)?eval(strData):null},RepeatHtml}();function renderTemplate(e,t){return e.replace(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.keyTypeArray,".$1").replace(_patterns__WEBPACK_IMPORTED_MODULE_0__.a.findTemplateVars,function(e,r){var n,a=r.split("."),i=t[a[0]];for(n=1;n<a.length;n++)i=i[a[n]];return i||e})}function insertAfter(e,t){t.nextSibling?t.parentNode.insertBefore(e,t.nextSibling):t.parentNode.appendChild(e)}function isOfType(e,t){return{}.toString.call(e).match(/\s(.+)\]$/)[1].toLowerCase()===t}},function(e,t,r){"use strict";r.r(t);var n=r(1);r.d(t,"RepeatHtml",function(){return n.a})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,